Class {
	#name : 'SSLOSSL_HANDSHAKE_STATE',
	#superclass : 'SSLEnumeration',
	#classVars : [
		'DTLS_ST_CR_HELLO_VERIFY_REQUEST',
		'DTLS_ST_SW_HELLO_VERIFY_REQUEST',
		'TLS_ST_BEFORE',
		'TLS_ST_CR_CERT',
		'TLS_ST_CR_CERT_REQ',
		'TLS_ST_CR_CERT_STATUS',
		'TLS_ST_CR_CERT_VRFY',
		'TLS_ST_CR_CHANGE',
		'TLS_ST_CR_COMP_CERT',
		'TLS_ST_CR_ENCRYPTED_EXTENSIONS',
		'TLS_ST_CR_FINISHED',
		'TLS_ST_CR_HELLO_REQ',
		'TLS_ST_CR_KEY_EXCH',
		'TLS_ST_CR_KEY_UPDATE',
		'TLS_ST_CR_SESSION_TICKET',
		'TLS_ST_CR_SRVR_DONE',
		'TLS_ST_CR_SRVR_HELLO',
		'TLS_ST_CW_CERT',
		'TLS_ST_CW_CERT_VRFY',
		'TLS_ST_CW_CHANGE',
		'TLS_ST_CW_CLNT_HELLO',
		'TLS_ST_CW_COMP_CERT',
		'TLS_ST_CW_END_OF_EARLY_DATA',
		'TLS_ST_CW_FINISHED',
		'TLS_ST_CW_KEY_EXCH',
		'TLS_ST_CW_KEY_UPDATE',
		'TLS_ST_CW_NEXT_PROTO',
		'TLS_ST_EARLY_DATA',
		'TLS_ST_OK',
		'TLS_ST_PENDING_EARLY_DATA_END',
		'TLS_ST_SR_CERT',
		'TLS_ST_SR_CERT_VRFY',
		'TLS_ST_SR_CHANGE',
		'TLS_ST_SR_CLNT_HELLO',
		'TLS_ST_SR_COMP_CERT',
		'TLS_ST_SR_END_OF_EARLY_DATA',
		'TLS_ST_SR_FINISHED',
		'TLS_ST_SR_KEY_EXCH',
		'TLS_ST_SR_KEY_UPDATE',
		'TLS_ST_SR_NEXT_PROTO',
		'TLS_ST_SW_CERT',
		'TLS_ST_SW_CERT_REQ',
		'TLS_ST_SW_CERT_STATUS',
		'TLS_ST_SW_CERT_VRFY',
		'TLS_ST_SW_CHANGE',
		'TLS_ST_SW_COMP_CERT',
		'TLS_ST_SW_ENCRYPTED_EXTENSIONS',
		'TLS_ST_SW_FINISHED',
		'TLS_ST_SW_HELLO_REQ',
		'TLS_ST_SW_KEY_EXCH',
		'TLS_ST_SW_KEY_UPDATE',
		'TLS_ST_SW_SESSION_TICKET',
		'TLS_ST_SW_SRVR_DONE',
		'TLS_ST_SW_SRVR_HELLO'
	],
	#category : 'LibSsl-Base',
	#package : 'LibSsl',
	#tag : 'Base'
}

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> DTLS_ST_CR_HELLO_VERIFY_REQUEST [
	"This method was automatically generated"
	^ DTLS_ST_CR_HELLO_VERIFY_REQUEST
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> DTLS_ST_SW_HELLO_VERIFY_REQUEST [
	"This method was automatically generated"
	^ DTLS_ST_SW_HELLO_VERIFY_REQUEST
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_BEFORE [
	"This method was automatically generated"
	^ TLS_ST_BEFORE
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CR_CERT [
	"This method was automatically generated"
	^ TLS_ST_CR_CERT
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CR_CERT_REQ [
	"This method was automatically generated"
	^ TLS_ST_CR_CERT_REQ
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CR_CERT_STATUS [
	"This method was automatically generated"
	^ TLS_ST_CR_CERT_STATUS
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CR_CERT_VRFY [
	"This method was automatically generated"
	^ TLS_ST_CR_CERT_VRFY
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CR_CHANGE [
	"This method was automatically generated"
	^ TLS_ST_CR_CHANGE
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CR_COMP_CERT [
	"This method was automatically generated"
	^ TLS_ST_CR_COMP_CERT
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CR_ENCRYPTED_EXTENSIONS [
	"This method was automatically generated"
	^ TLS_ST_CR_ENCRYPTED_EXTENSIONS
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CR_FINISHED [
	"This method was automatically generated"
	^ TLS_ST_CR_FINISHED
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CR_HELLO_REQ [
	"This method was automatically generated"
	^ TLS_ST_CR_HELLO_REQ
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CR_KEY_EXCH [
	"This method was automatically generated"
	^ TLS_ST_CR_KEY_EXCH
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CR_KEY_UPDATE [
	"This method was automatically generated"
	^ TLS_ST_CR_KEY_UPDATE
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CR_SESSION_TICKET [
	"This method was automatically generated"
	^ TLS_ST_CR_SESSION_TICKET
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CR_SRVR_DONE [
	"This method was automatically generated"
	^ TLS_ST_CR_SRVR_DONE
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CR_SRVR_HELLO [
	"This method was automatically generated"
	^ TLS_ST_CR_SRVR_HELLO
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CW_CERT [
	"This method was automatically generated"
	^ TLS_ST_CW_CERT
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CW_CERT_VRFY [
	"This method was automatically generated"
	^ TLS_ST_CW_CERT_VRFY
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CW_CHANGE [
	"This method was automatically generated"
	^ TLS_ST_CW_CHANGE
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CW_CLNT_HELLO [
	"This method was automatically generated"
	^ TLS_ST_CW_CLNT_HELLO
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CW_COMP_CERT [
	"This method was automatically generated"
	^ TLS_ST_CW_COMP_CERT
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CW_END_OF_EARLY_DATA [
	"This method was automatically generated"
	^ TLS_ST_CW_END_OF_EARLY_DATA
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CW_FINISHED [
	"This method was automatically generated"
	^ TLS_ST_CW_FINISHED
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CW_KEY_EXCH [
	"This method was automatically generated"
	^ TLS_ST_CW_KEY_EXCH
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CW_KEY_UPDATE [
	"This method was automatically generated"
	^ TLS_ST_CW_KEY_UPDATE
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_CW_NEXT_PROTO [
	"This method was automatically generated"
	^ TLS_ST_CW_NEXT_PROTO
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_EARLY_DATA [
	"This method was automatically generated"
	^ TLS_ST_EARLY_DATA
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_OK [
	"This method was automatically generated"
	^ TLS_ST_OK
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_PENDING_EARLY_DATA_END [
	"This method was automatically generated"
	^ TLS_ST_PENDING_EARLY_DATA_END
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SR_CERT [
	"This method was automatically generated"
	^ TLS_ST_SR_CERT
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SR_CERT_VRFY [
	"This method was automatically generated"
	^ TLS_ST_SR_CERT_VRFY
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SR_CHANGE [
	"This method was automatically generated"
	^ TLS_ST_SR_CHANGE
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SR_CLNT_HELLO [
	"This method was automatically generated"
	^ TLS_ST_SR_CLNT_HELLO
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SR_COMP_CERT [
	"This method was automatically generated"
	^ TLS_ST_SR_COMP_CERT
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SR_END_OF_EARLY_DATA [
	"This method was automatically generated"
	^ TLS_ST_SR_END_OF_EARLY_DATA
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SR_FINISHED [
	"This method was automatically generated"
	^ TLS_ST_SR_FINISHED
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SR_KEY_EXCH [
	"This method was automatically generated"
	^ TLS_ST_SR_KEY_EXCH
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SR_KEY_UPDATE [
	"This method was automatically generated"
	^ TLS_ST_SR_KEY_UPDATE
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SR_NEXT_PROTO [
	"This method was automatically generated"
	^ TLS_ST_SR_NEXT_PROTO
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SW_CERT [
	"This method was automatically generated"
	^ TLS_ST_SW_CERT
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SW_CERT_REQ [
	"This method was automatically generated"
	^ TLS_ST_SW_CERT_REQ
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SW_CERT_STATUS [
	"This method was automatically generated"
	^ TLS_ST_SW_CERT_STATUS
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SW_CERT_VRFY [
	"This method was automatically generated"
	^ TLS_ST_SW_CERT_VRFY
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SW_CHANGE [
	"This method was automatically generated"
	^ TLS_ST_SW_CHANGE
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SW_COMP_CERT [
	"This method was automatically generated"
	^ TLS_ST_SW_COMP_CERT
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SW_ENCRYPTED_EXTENSIONS [
	"This method was automatically generated"
	^ TLS_ST_SW_ENCRYPTED_EXTENSIONS
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SW_FINISHED [
	"This method was automatically generated"
	^ TLS_ST_SW_FINISHED
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SW_HELLO_REQ [
	"This method was automatically generated"
	^ TLS_ST_SW_HELLO_REQ
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SW_KEY_EXCH [
	"This method was automatically generated"
	^ TLS_ST_SW_KEY_EXCH
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SW_KEY_UPDATE [
	"This method was automatically generated"
	^ TLS_ST_SW_KEY_UPDATE
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SW_SESSION_TICKET [
	"This method was automatically generated"
	^ TLS_ST_SW_SESSION_TICKET
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SW_SRVR_DONE [
	"This method was automatically generated"
	^ TLS_ST_SW_SRVR_DONE
]

{ #category : 'accessing enum' }
SSLOSSL_HANDSHAKE_STATE class >> TLS_ST_SW_SRVR_HELLO [
	"This method was automatically generated"
	^ TLS_ST_SW_SRVR_HELLO
]

{ #category : 'enum declaration' }
SSLOSSL_HANDSHAKE_STATE class >> enumDecl [

	^ #(
	TLS_ST_BEFORE 0
	TLS_ST_OK 1
	DTLS_ST_CR_HELLO_VERIFY_REQUEST 2
	TLS_ST_CR_SRVR_HELLO 3
	TLS_ST_CR_CERT 4
	TLS_ST_CR_COMP_CERT 5
	TLS_ST_CR_CERT_STATUS 6
	TLS_ST_CR_KEY_EXCH 7
	TLS_ST_CR_CERT_REQ 8
	TLS_ST_CR_SRVR_DONE 9
	TLS_ST_CR_SESSION_TICKET 10
	TLS_ST_CR_CHANGE 11
	TLS_ST_CR_FINISHED 12
	TLS_ST_CW_CLNT_HELLO 13
	TLS_ST_CW_CERT 14
	TLS_ST_CW_COMP_CERT 15
	TLS_ST_CW_KEY_EXCH 16
	TLS_ST_CW_CERT_VRFY 17
	TLS_ST_CW_CHANGE 18
	TLS_ST_CW_NEXT_PROTO 19
	TLS_ST_CW_FINISHED 20
	TLS_ST_SW_HELLO_REQ 21
	TLS_ST_SR_CLNT_HELLO 22
	DTLS_ST_SW_HELLO_VERIFY_REQUEST 23
	TLS_ST_SW_SRVR_HELLO 24
	TLS_ST_SW_CERT 25
	TLS_ST_SW_COMP_CERT 26
	TLS_ST_SW_KEY_EXCH 27
	TLS_ST_SW_CERT_REQ 28
	TLS_ST_SW_SRVR_DONE 29
	TLS_ST_SR_CERT 30
	TLS_ST_SR_COMP_CERT 31
	TLS_ST_SR_KEY_EXCH 32
	TLS_ST_SR_CERT_VRFY 33
	TLS_ST_SR_NEXT_PROTO 34
	TLS_ST_SR_CHANGE 35
	TLS_ST_SR_FINISHED 36
	TLS_ST_SW_SESSION_TICKET 37
	TLS_ST_SW_CERT_STATUS 38
	TLS_ST_SW_CHANGE 39
	TLS_ST_SW_FINISHED 40
	TLS_ST_SW_ENCRYPTED_EXTENSIONS 41
	TLS_ST_CR_ENCRYPTED_EXTENSIONS 42
	TLS_ST_CR_CERT_VRFY 43
	TLS_ST_SW_CERT_VRFY 44
	TLS_ST_CR_HELLO_REQ 45
	TLS_ST_SW_KEY_UPDATE 46
	TLS_ST_CW_KEY_UPDATE 47
	TLS_ST_SR_KEY_UPDATE 48
	TLS_ST_CR_KEY_UPDATE 49
	TLS_ST_EARLY_DATA 50
	TLS_ST_PENDING_EARLY_DATA_END 51
	TLS_ST_CW_END_OF_EARLY_DATA 52
	TLS_ST_SR_END_OF_EARLY_DATA 53 )
]
